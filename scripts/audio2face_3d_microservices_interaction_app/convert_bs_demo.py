# -*- coding: utf-8 -*-            
# @Author : Dony YUAN
# @Time : 2025/1/4 11:20
import json
import os
from collections import OrderedDict


def convert_bs_demo(work_dir):
    json_path = os.path.join(work_dir, 'blendshape.json')
    bs_list = []
    with open(json_path, "r") as f:
        data_list = json.load(f)
        for idx, data in enumerate(data_list):
            bs_list_new = {}
            bs = data["blendShapes"]
            timestamp = data["timeCode"]
            for k, v in bs.items():
                k = k.replace(k[0], k[0].lower())
                bs_list_new[k] = round(v, 3)  # 保留3位小数
            bs_list_new["endTime"] = idx + 2  # endTime start_idx 2
            print(idx, timestamp, bs_list_new)
            bs_list.append(bs_list_new)
    json.dump(bs_list, open(os.path.join(work_dir, "bs.json"), "w"), indent=4, ensure_ascii=False)
    # json.dump(bs_list, open(os.path.join(work_dir, "bs.json"), "w"), ensure_ascii=False)
    return bs_list, timestamp

def test_convert_bs_demo():
    work_dir_path = "output_000007/"
    bs_list, duration = convert_bs_demo(work_dir_path)
    with open("test.json", "r") as f:
        resp = json.load(f)
        resp["data"]["bsList"] = bs_list
        resp["data"]["duration"] = duration
    with open("test_v7.json", "w") as f:
        # f.write(json.dumps(resp, indent=4, ensure_ascii=False))
        f.write(json.dumps(resp, ensure_ascii=False))


def normalize_bs(bs_json_path):
    """ 微软API接口 https://learn.microsoft.com/zh-cn/azure/ai-services/speech-service/how-to-speech-synthesis-viseme?tabs=3dblendshapes&pivots=programming-language-python
    {
    "FrameIndex":0,
    "BlendShapes":[
        [0.021,0.321,...,0.258],
        [0.045,0.234,...,0.288],
        ...
        ]
    }
    PS:The last two-dimensional blendshape data generated by audio2face are different from the blendshape data obtained from the Microsoft API.
    as below：
        [Microsoft]"leftEyeRoll": 0,    ====>       [a2f]"HeadPitch": 0.0,
        [Microsoft]"rightEyeRoll": 0,   ====>       [a2f]"HeadYaw": 0.0
    """
    bs_dict = {"FrameIndex": 0, "BlendShapes": []}
    with open(bs_json_path, "r") as f:
        bs_arr = json.load(f)
        bs_l = bs_dict.setdefault("BlendShapes", [])
        for bs in bs_arr:
            frame_arr = []
            for v in bs["blendShapes"].values():
                # frame_arr.append(v)
                frame_arr.append(round(v, 3))   # 保留三位小数, round(v, 3)
            bs_l.append(frame_arr)
    # print(bs_dict)
    return bs_dict

def test_normalize_bs():
    work_dir_path = "output_bs/test.json"
    bs_dict = normalize_bs(work_dir_path)
    for v in bs_dict["BlendShapes"]:
        print(v)


if __name__ == '__main__':
    test_normalize_bs()